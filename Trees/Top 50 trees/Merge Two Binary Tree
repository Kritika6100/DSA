3 Ways
Recursive (DFS)
Iterative(DFS)//preorder //postorder//inorder
Iterative(BFS)//level order

Appoarch 1:
 //method 1
        if(root1==null && root2==null)
        {
            return null;
        }
        if(root1==null)
        {
            return root2;
        }
        if(root2==null)
        {
            return root1;
        }
        root1.val+=root2.val;
       root1.left=mergeTrees(root1.left,root2.left);
        root1.right=mergeTrees(root1.right,root2.right);
        return root1;
    }
}
t.c O(N)
beacuse we have to iterate all the nodes
s.c O(H) to store the recursive stack but this O(H) can became O(N) if the tree is screwed tree 
Tell me the drawbacks and cases where this solution will fail;
Stack Overflow because to maintain the reursive stack program use memory that is heap memory



//////////////////////////////////////////////////////
Method 2
We can get over the stack overflow if we use the iterative method
Out of memory aasakta hai par 
is there any way you can increase the memory
you should go with the itraeive bfs method

