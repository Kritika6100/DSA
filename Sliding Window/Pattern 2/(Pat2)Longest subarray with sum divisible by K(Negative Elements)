Given an array containing N integers and a positive integer K, find the length of the longest sub array with sum of the elements divisible by the given value K.

Example 1:

Input:
A[] = {2, 7, 6, 1, 4, 5}
K = 3
Output: 4
Explanation:The subarray is {7, 6, 1, 4}
with sum 18, which is divisible by 3.
Example 2:

Input:
A[] = {-2, 2, -5, 12, -11, -1, 7}
K = 3
Output: 5
Explanation:
The subarray is {2,-5,12,-11,-1} with
sum -3, which is divisible by 3.

class Solution{
    int longSubarrWthSumDivByK(int a[], int n, int k)
    {
        // Complete the function
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,-1);
        int sum=0;
        int maxlen=0;
        int len=0;
        for(int i=0;i<n;i++)
        {
            sum+=a[i];
            int dif=sum%k;
            if(dif<0)
            {
                dif=dif+k;
            }
            if(map.containsKey(dif))
            {
                len=i-map.get(dif);
                if(len>maxlen)
                {
                    maxlen=len;
                }
            }
            if(!map.containsKey(dif))
           {
               map.put(dif,i);
           }
        }
        return maxlen;
        
       
    }
 
}
Pattern 2
In this ques 
Due to negative element we have to add one more line for dif<0
di=dif+k;

