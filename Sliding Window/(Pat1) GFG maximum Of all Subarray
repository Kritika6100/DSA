N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 
Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6
class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
        // Your code here
        //Sliding window
        //priority queue reverse
        //acquire and realise strategy
        ArrayList<Integer> list=new ArrayList<>();
        PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        for(int i=0;i<k-1;i++)
        {
            pq.add(arr[i]);
        }
        for(int j=0,i=k-1;i<arr.length;)
        {
            //acquire
            pq.add(arr[i]);
            //work
            list.add(pq.peek());
            //realease
            pq.remove(arr[j]);
            i++;
            j++;
            
        }
        return list;
    }
}
