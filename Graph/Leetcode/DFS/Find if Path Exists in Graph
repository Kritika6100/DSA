There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.


Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.


class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        
        //1.Create The Adjaceny List
        ArrayList<Integer> graph[]=new ArrayList[n];
        
        for(int i=0;i<n;i++)
        {
            graph[i]=new ArrayList<Integer>();
        }
        for(int edge[]:edges)
        {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        boolean visited[]=new boolean[n];
        return haspath(graph,source,destination,n,visited);
    }
    public static boolean haspath(ArrayList<Integer> graph[],int src,int d,int n,boolean visited[])
    {
        if(src==d)
        {
            return true;
        }
        visited[src]=true;
        for(int nbr:graph[src])
        {
            if(visited[nbr]==false)
            {
             boolean ispath=haspath(graph,nbr,d,n,visited);
            
            if(ispath==true)
            {
                return true;
            }
        }
    }
        return false;
}
}

//////////////////////////////////
lass Solution
{
    public int possible_paths(int[][] edges, int n, int s, int d)
    {
        // Code here 
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<ArrayList<Integer>>(n);
        for(int i=0; i<n; i++){
            adjList.add(new ArrayList<Integer>());
        }
        for(int i=0; i<edges.length; ++i){
            adjList.get(edges[i][0]).add(edges[i][1]);
        }
        // can do both dfs and bfs
        // I will go with dfs
        // no need of vis as it is DAG
        int[] nWays = {0};
        dfs(s,-1,d,nWays,adjList);
        return nWays[0];
    }
    public void dfs(int source,int parent,int destination, int[] nWays,  ArrayList<ArrayList<Integer>> adjList){
        //vis[source] = 1;
        if(source == destination){
            nWays[0] += 1;
            return;
        }
        for(Integer v:adjList.get(source)){
            dfs(v,source,destination,nWays,adjList);
        }
    }
}
