class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> storeDfs = new ArrayList<>();

        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V];

        //If you are starting from node 2, then i should start from 2.
        for(int i = 0;i<V;i++) {
            if(vis[i]==false) dfs(i, vis, adj, storeDfs);
        }

        return storeDfs;
    }
   public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> storeDfs) {
        storeDfs.add(node);
        //marking current node as visited
        vis[node] = true;

        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, storeDfs);
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import java.util.*;

public class Solution {
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
        // Write your code here.
        //Step 1 edge de hui h make adjaceny list
          ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
          ArrayList<ArrayList<Integer>> ans1=new ArrayList<>();
      
        for(int i=0;i<v;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<e;i++)
        {
            int u=edges.get(i).get(0);
            int v1=edges.get(i).get(1);
            adj.get(u).add(v1);
            adj.get(v1).add(u);
        }
      
        //make boolean visited array
        
        boolean visited[]=new boolean[v];
        for(int i=0;i<v;i++)
        {
             
            if(visited[i]==false)
            {
                 ArrayList<Integer> ans=new ArrayList<>();
                dfs(i,visited,ans,adj);
                ans1.add(ans);
            }
        }
        return ans1;
    }

        public static void dfs(int node,boolean visited[],ArrayList<Integer> ans ,ArrayList<ArrayList<Integer>> adj)
        {
             ans.add(node);
            visited[node]=true;
        
            for(Integer it:adj.get(node))
            {
                if(visited[it]==false)
                {
                    dfs(it,visited,ans,adj);
                }
            }
            
        }
        
    }
