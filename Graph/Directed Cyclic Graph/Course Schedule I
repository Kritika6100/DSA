There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 //////////////////////
 
 
 
 class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
       
        int n=numCourses;
            int e=prerequisites.length;
        ArrayList<ArrayList<Integer>> list=new ArrayList<>();
        boolean visited[]=new boolean[n];
       boolean dfsvisited[]=new boolean[n];
     
        for(int i=0;i<n;i++)
        {
            list.add(new ArrayList<>());
        }
        for(int i=0;i<e;i++)
        {
           int u=prerequisites[i][0];
            int v=prerequisites[i][1];
            list.get(u).add(v);
        }
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                boolean cyclepresent=dfs(i,list,visited,dfsvisited);
            
            if(cyclepresent==true)
            
                return false;
            
        }
        }
        return true;
    }
    public static boolean dfs(int node,ArrayList<ArrayList<Integer>> list,boolean visited[], boolean dfsvisited[])
    {
        visited[node]=true;
        dfsvisited[node]=true;
        for(Integer it:list.get(node))
        {
            if(!visited[it])
            {
                boolean check=dfs(it,list,visited,dfsvisited);
                if(check)
                {
                    return true;
                }
            }
            else if(dfsvisited[it]==true)
            
            {
                return true;
            }
        }
        dfsvisited[node]=false;
        return false;
    }
}
