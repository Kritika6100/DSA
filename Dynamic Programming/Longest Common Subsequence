// recursive code
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int l1=text1.length();
        int l2=text2.length();
          int max=lcs(text1,text2,l1,l2);
         return max;
    
    }
  
      public int lcs(String s,String t,int n,int m)
        {
            if(n==0||m==0)
            {
                return 0;
            }
            if(s.charAt(n-1)==t.charAt(m-1))
            {
                return 1+lcs(s,t,n-1,m-1);
            }
            else
            {
                return Math.max(lcs(s,t,n,m-1),lcs(s,t,n-1,m));
            }
      }
      // memorized method
      class Solution {
    int t[][]=new int[1001][1001];
   
    public int longestCommonSubsequence(String text1, String text2) {
        int l1=text1.length();
        int l2=text2.length();
        for(int i=0;i<1001;i++)
    {
        for(int j=0;j<1001;j++)
        {
            t[i][j]=-1;
        }
    }
          int max=lcs(text1,text2,l1,l2,t);
         return max;
    
    }
  
      public int lcs(String s,String t,int n,int m,int t1[][])
        {
            if(n==0||m==0)
            {
                return 0;
            }
          if(t1[n][m]!=-1)
          {
              return t1[n][m];
          }
            if(s.charAt(n-1)==t.charAt(m-1))
            {
                return t1[n][m]=1+lcs(s,t,n-1,m-1,t1);
            }
            else
            {
                return t1[n][m]=Math.max(lcs(s,t,n,m-1,t1),lcs(s,t,n-1,m,t1));
            }
      }
     }
     // Top Down Lcs
      int n=text1.length();
        int m=text2.length();
        int t[][]=new int[n+1][m+1];
        for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
           if(i==0|| j==0)
           {
               t[i][j]=0;
           }
        }
    }
       for(int i=1;i<n+1;i++)
       {
           for(int j=1;j<m+1;j++)
           {
               
           
       if(text1.charAt(i-1)==text2.charAt(j-1))
       {
           t[i][j]=1+t[i-1][j-1];
       }
       else
       {
           t[i][j]=Math.max(t[i-1][j],t[i][j-1]);
       }
           }
       }
       return t[n][m];
   }
}
      
        
      
