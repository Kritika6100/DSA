Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

 Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []
Example 3:

Input: head = [7,7,7,7], val = 7
Output: []




class Solution {
    public ListNode removeElements(ListNode head, int val) {
    CASE 1:IF my Linked list is empty
        if(head==null)
        {
            return null;
        }
        CAse 2:If my head has the value which we have to remove
        while(head.val==val)
        {
       head=head.next;
        
        if(head==null)
        
            return head;
        }
        case 3:
        Duplicate value is somewhere else other than head
        ListNode pointer = head;
          while (pointer.next != null) 
          {
              
        if (pointer.next.val == val) 
            pointer.next = pointer.next.next;
        else 
            pointer = pointer.next;
    }
       return head; 
    }
}
